import pickle
import random

#=======================================================================================================================
#------------------------Выбор наиболее вероятного слова с некоторым распределением-------------------------------------
#=======================================================================================================================
def choice_best(words):
    rand_sequence = []
    for word in words:
        p = int(words[word]*100//10)
        rand_sequence += [word]*p

    return random.choice(rand_sequence)

#=======================================================================================================================
#-----------------------------------Выбор наиболее подходящей n-граммы--------------------------------------------------
#=======================================================================================================================
def get_near_elem(NDict, elem):
    n = len(elem)
    best_elem, best_value = random.choice(list(NDict.items()))
    best_count = 0

    for elem_dict in NDict:
        if elem_dict[n-1] == elem[n-1]:
            count = 1
            for i in range(n-1):
                if elem_dict[i] == elem[i]:
                    count += 1
            if count > best_count:
                best_elem = elem_dict
                best_count = count
            if best_count == n - 1:
                break

    return best_elem

#=======================================================================================================================
#------------------------------------Получаем наиболее вероятное слово--------------------------------------------------
#=======================================================================================================================
def get_word(NDict, elem):
    if elem in NDict:
        words = NDict[elem]
        while words == {}:
            words = random.choice(list(NDict.values()))
        word = choice_best(words)
    else:
        near_elem = get_near_elem(NDict, elem)
        words = NDict[near_elem]
        while words == {}:
            words = random.choice(list(NDict.values()))
        word = choice_best(words)

    return word

#=======================================================================================================================
#---------------------------------Предсказываем слово по последним n словам---------------------------------------------
#=======================================================================================================================
def predict_word(NDict, n, text):
    new_text = (n-1)*['START']+text
    p = new_text.index('')
    elem = tuple(new_text[p-n:p])
    return get_word(NDict, elem)

#=======================================================================================================================
#----------------------Генерируем цепочку из m слов. Первое слово выбирается случайно-----------------------------------
#=======================================================================================================================
def generate_text(NDict, n, words, m):
    generate_words = m*['']
    generate_words[0] = random.choice(words)

    for i in range(1, m):
        word = predict_word(NDict, n, generate_words)
        generate_words[i] = word
        print('predicted word is ', word)

    text = ''
    for word in generate_words:
        text += word + ' '
    return text


#=======================================================================================================================
#----------------------------------------------Основная программа-------------------------------------------------------
#=======================================================================================================================
m = 10

with open('data.pickle', 'rb') as f:
    NDict = pickle.load(f)
    words = pickle.load(f)
    n = pickle.load(f)

text = generate_text(NDict, n, words, m)
print('сгенерировнный текст: ', text)